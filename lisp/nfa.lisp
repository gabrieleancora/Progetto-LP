;; SCIVOLA SCIVOLA SCIVOLA SCIVOLA SCIVOLA SCIVOLA SCIVOLA SCIVOLA SCIVOLA SCIVOLA SCIVOLA SCIVOLA 
(defun is-regexp (RE)
    (write RE)
    (if (not (listp RE))
        T
        (if (null (car RE))
                T
            (if (listp (car RE)) 
                    (progn (is-regexp (car RE))
                    (is-regexp (cdr RE)))
                (cond 
                    ((equal (list (car RE)) '([]))
                        (princ "seq")
                        (is-regexp (cdr RE)))
                    ((equal (list (car RE)) '(*)) 
                        (princ "star")
                        (if (equal (list-length (cdr RE)) 1) 
                            (princ "lista carina"))
                            (is-regexp (cdr RE)))
                    ((equal (list (car RE)) '(/)) 
                        (princ "or")
                        (is-regexp (cdr RE)))
                    ((equal (list (car RE)) '(+)) 
                        (princ "plus")
                        (if (equal (list-length (cdr RE)) 1) 
                            (princ "lista carina due"))
                            (is-regexp (cdr RE)))
                    (T (is-regexp (cdr RE)))
                )   
            )   
        )
    )
)
        ;; (t (if (> (list-length (cdr RE)) 0) 
        ;;     (is-regexp (cdr RE))
        ;;     (if (null (cdr RE))
        ;;         T
        ;;         NIL
        ;;     )
        ;; ))
        ;; (coerce RE 'vector)
